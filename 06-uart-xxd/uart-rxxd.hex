13 00 00 00  # nop
13 00 00 00  # nop
13 00 00 00  # nop
13 00 00 00  # nop

# Initialise UART
b7 27 01 10  # lui a5,0x10012
93 87 c7 03  # addi a5, a5, 0x3c
03 a5 07 00  # lw a0, 0(a5)
93 05 30 00  # addi a1, x0, 0x3
93 95 05 01  # slli a1, a1, 0x10
b3 05 b0 40  # neg a1, a1 # sub a1, x0, a1
33 f5 a5 00  # and a0, a1, a0
23 a0 a7 00  # sw a0, 0(a5)
93 87 87 ff  # addi a5, a5, -0x8
03 a5 07 00  # lw a0, 0(a5)
b3 05 b0 40  # neg a1, a1 # sub a1, x0, a1
33 65 b5 00  # or a0, a0, a1
b7 37 01 10  # lui a5, 0x10013
93 87 87 01  # addi a5, a5, 0x18
13 05 a0 08  # addi a0, x0, 0x8a
23 a0 a7 00  # sw a0, 0(a5)
93 87 07 ff  # addi a5, a5, -0x10
13 05 10 00  # addi a0, x0, 0x1
23 a0 a7 00  # sw a0, 0(a5)
93 87 47 00  # addi a5, a5, 0x4
13 05 10 00  # addi a0, x0, 0x1
23 a0 a7 00  # sw a0, 0(a5)

# Pad to 0x80
13 00 00 00  # nop
13 00 00 00  # nop
13 00 00 00  # nop
13 00 00 00  # nop
13 00 00 00  # nop
13 00 00 00  # nop


# Register allocation:
# t0 / x05: current word
# t1 / x06: nibble count
# s0 / x08: flags - 0x1 == in comment mode
# a2 / x12: 0x8000_0000 *used for reading/writing UART)
# a4 / x14: RAM write pointer, starts at 0x8001_0000
# a5 / x15: UART0_TXDATA = 0x10013000 (write UART)
# a6 / x16: UART0_RXDATA = 0x10013004 (receive UART)
# a7 / x17: 0xa (used for comparing in comment mode)

93 02 00 00  # mv x05, x00 == addi x05, x00, 0x0
13 03 00 00  # mv x06, x0 == addi x06, x00, 0x0
13 04 00 00  # mv x08, x0 == addi x08, x00, 0x0
37 06 00 80  # lui x12, 0x80000
37 07 01 80  # lui x14, 0x80010
b7 37 01 10  # lui x15, 0x10013
13 88 47 00  # addi x16, x15, 0x4
93 08 a0 00  # addi x17, x00, 0xa

# Pad to 0xB0
13 00 00 00  # nop
13 00 00 00  # nop
13 00 00 00  # nop
13 00 00 00  # nop

# .READ_UART
# Read a byte from UART
03 25 08 00  # lw x10, 0(x16)
33 75 c5 00  # and x10, x10, x12
e3 1c 05 fe  # bnez x10, -8 == bne x10, x0, -8
13 75 f5 0f  # andi x10, x10, 0xFF

# Pad to 0xD0
13 00 00 00  # nop
13 00 00 00  # nop
13 00 00 00  # nop

# If we're in comment mode, ignore everything that isn't 0xa
# Since we only have 1 flag at the moment, we just skip comment mode
# if the flags register is zero
63 02 04 02  # beq x08, x00, 0x20

# Comment mode: skip anything which isn't 0xa
63 16 15 01  # bne x10, x17, +0x8
13 04 00 00  # addi x08, x00, 0x0
13 00 00 00  # nop
e3 0a 00 fc  # beq x0, x0, .READ_UART

13 00 00 00  # nop
13 00 00 00  # nop
13 00 00 00  # nop
13 00 00 00  # nop

# If we're here, we're not in comment mode
# We need to check if we got 0x23 (#) and if so,
# enter comment mode

93 04 30 02  # addi x09, x00, 0x23
63 08 95 00  # beq x10, x09, +0x10

# We got a #, so enter comment mode
13 04 10 00  # addi x08, x00, 0x1
e3 0a 00 fa  # beq x00, x00, .READ_UART (-0x4C)
13 00 00 00  # nop
13 00 00 00  # nop

# If we didn't get 0x23, then we can ignore anything below 0x30 ('0')
93 04 00 03  # addi x09, x00, 0x30
63 58 95 00  # bge x10, x09, +0xC
13 00 00 00  # nop
13 00 00 00  # nop
e3 0c 00 f8  # beq x00, x00, .READ_UART

# The value is >= 0x30, so it could be a hex char
# If the value is less than 0x3a, we just subtract 0x30 and that's the value
13 04 a0 03  # addi x08, x00, 0x3a
63 5a 85 00  # bge x10, x08, +0x14

# We got a value in the range 0x30 - 0x39 inclusive. Subtract 0x30 and we have our raw value
13 05 00 fd  # addi x10, x00, -0x30
13 00 00 00  # nop
13 00 00 00  # nop
13 00 00 00  # TODO: CHANGEME to beq x0, x0, +.ADDRAW

# Otherwise, we got a value >= 0x3A, so it could be a lower or uppercase letter.
# We OR 0x10 with 0x20 to force lowercase, and then check that the value is in
# the range 0x61 ('a') to 0x66 ('f'). If it is, we subtract 0x57 to get the raw value
# in the range 0xA - 0xF

13 65 00 02  # ori  x10, x00, 0x20
13 04 10 06  # addi x08, x00, 0x61
13 00 00 00  # blt  x10, x08, .PANIC # TODO: CHANGEME
13 04 70 06  # addi x08, x00, 0x67
13 00 00 00  # bgt  x10, x08, .PANIC = blt x08, x10, .PANIC TODO: CHANGEME
13 05 95 fa  # addi x10, x10, -0x57
13 00 00 00  # TODO: CHANGEME to beq x0, x0, +.ADDRAW


# ADDRAW: we got a value to be added to our "running word" which will be written
# when it's complete.
# We shift left by some multiple of 4 bits and OR the resulting value with the
# running value in x05. If we shifted left by K, we reset the shift amount and write
# x5 to the RAM at x14 and increment x14 by 4.
# After all steps, we jump back and read another byte from UART.

## ## ## ##
## ## ## ##
## ## ## ##
## ## ## ##
## ## ## ##
## ## ## ##
